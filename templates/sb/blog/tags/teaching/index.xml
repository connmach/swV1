<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Teaching on KCC Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>/blog/tags/teaching/</link>
    <language>en-us</language>
    
    
    <updated>Fri, 10 Nov 2017 08:22:12 -0700</updated>
    
    <item>
      <title>Godot Engine in the Classroom: Getting Started</title>
      <link>/blog/2017/11/godot_classroom_1/</link>
      <pubDate>Fri, 10 Nov 2017 08:22:12 -0700</pubDate>
      
      <guid>/blog/2017/11/godot_classroom_1/</guid>
      <description>&lt;p&gt;I began using Godot Engine with a group of students. This is a small group of
my most advanced middle schoolers (ages 11-12), with 1+ years of Python
experience. I do an &amp;ldquo;advanced topics&amp;rdquo; class with them every Thursday after school.
They have never used a game engine before.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it went.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Part of the reason for doing this was to get some real-world experience taking
students through the &lt;a href=&#34;http://docs.godotengine.org/en/latest/learning/step_by_step/your_first_game.html&#34;&gt;
&amp;ldquo;Dodge the Creeps&amp;rdquo;&lt;/a&gt; tutorial I wrote for the Godot 3.0
documentation. This is designed to be a user&amp;rsquo;s first experience making a project
in Godot, and I wanted to see first-hand where any pain points might be.&lt;/p&gt;

&lt;p&gt;This means we are using the Godot 3.0 alpha. It&amp;rsquo;s very stable at this point,
so I feel fairly confident that students won&amp;rsquo;t run into any showstopping bugs
along the way. Fortunately, these kids are happy to be guinea pigs.&lt;/p&gt;

&lt;h2 id=&#34;first-steps&#34;&gt;First steps&lt;/h2&gt;

&lt;p&gt;We started with an introduction to the engine UI and an overview of the concept
of scenes and nodes - the fundamental building blocks of Godot. Since they are
very familiar with Python&amp;rsquo;s object model, they were able to relate the ideas of
a Godot node and a Python object.&lt;/p&gt;

&lt;p&gt;Most of the students have at heard of Unity, so there was some discussion of what
a game engine is, closed- versus open-source, and why a developer might choose
one option over another.&lt;/p&gt;

&lt;p&gt;Two of the students either didn&amp;rsquo;t hear or were too excited, and didn&amp;rsquo;t click
&amp;ldquo;Create folder&amp;rdquo; when making the new project. That means the project was created
in their home folder. Fortunately, that wasn&amp;rsquo;t too tough to correct, but I&amp;rsquo;m
going to suggest a feature that warns when creating a new project in an non-empty
folder.&lt;/p&gt;

&lt;p&gt;As always with students, file management (moving the art assets into the project
folder) was more painful and frustrating than any of the coding ever is.&lt;/p&gt;

&lt;p&gt;Some first reactions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Whoa, this looks complicated!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Cool! It&amp;rsquo;s all black!&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-player&#34;&gt;Creating the player&lt;/h2&gt;

&lt;p&gt;The first part of the tutorial is setting up the &lt;code&gt;Player&lt;/code&gt; scene. This is an
&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; with
&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animatedsprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animatedsprite&#34;&gt;&lt;use xlink:href=&#34;/blog/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;AnimatedSprite&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionshape2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/a&gt;
children.&lt;/p&gt;

&lt;p&gt;Adding the children led to a couple instances of this:
&lt;img src=&#34;/blog/blog/img/add_child_error.png&#34; width=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;Students must be reminded to click on the desired parent node &lt;em&gt;before&lt;/em&gt; clicking
on &amp;ldquo;Add Node&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Adding the frames to the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animatedsprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animatedsprite&#34;&gt;&lt;use xlink:href=&#34;/blog/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;AnimatedSprite&lt;/code&gt;&lt;/a&gt;
went smoothly, but it was when adding the collision shape that some problems
started to appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/collision_offset_problem.png&#34; width=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;It is far too easy and unnoticeable to wind up with the children offset and/or
scaled relative to the parent. Nearly every student had trouble with this in one
way or another. When looking at the collision shape, it is much too tempting and
easy to grab the rectangular handles and move/stretch it. When scaling the
capsule shape, if you don&amp;rsquo;t click exactly on the size handle, you wind up moving
the shape instead.&lt;/p&gt;

&lt;p&gt;I think that it must be emphasized &lt;em&gt;before&lt;/em&gt; adding a child that you probably
want to click the &amp;ldquo;lock children&amp;rdquo; button (which has a very mystifying icon, by
the way).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/lock_children.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting&#34;&gt;Scripting&lt;/h2&gt;

&lt;p&gt;Once the player scene was created, it was time to add a script for movement. This
part went very smoothly. I spent a couple of minutes talking about the minor
differences between GDScript and Python (using &lt;code&gt;var&lt;/code&gt; to declare variables, and
&lt;code&gt;func&lt;/code&gt; instead of &lt;code&gt;def&lt;/code&gt; mainly), and we were off.&lt;/p&gt;

&lt;p&gt;The kids really liked the IDE. At the beginner level in my Python class, I don&amp;rsquo;t
like to have them use autocompletion, so this was a big plus for them. One
student declared that she&amp;rsquo;s never going to type a whole function name again! They
also liked the real-time error checking.&lt;/p&gt;

&lt;p&gt;Nothing in the code itself was a problem for them. Checking for key inputs,
normalizing velocity, and clamping to the screen were all familiar concepts. It
was a big help that I spend a lot of time in my Python class getting them used
to working with vectors, so I didn&amp;rsquo;t need to explain any of that.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up-week-1&#34;&gt;Wrapping up Week 1&lt;/h2&gt;

&lt;p&gt;At this point we were out of time, so adding the enemies and the UI will have
to wait for next week&amp;rsquo;s class. They really didn&amp;rsquo;t want to stop, which I expected,
and they&amp;rsquo;re all excited for next week. I asked them what they thought so far and
they were all happy with the Godot experience.&lt;/p&gt;

&lt;p&gt;Long term, my goal with these students is to work through a couple of projects
together and then turn them loose to develop their own games. Two of the girls
really like working together and I expect they&amp;rsquo;ll want to collaborate on a game,
so we may even touch on some source control and project management topics.&lt;/p&gt;

&lt;h2 id=&#34;pain-points-for-me&#34;&gt;Pain points for me&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dark UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dark UIs are great, I love them. But in the classroom, it means I did have
to turn the lights off in order for it to be at all visible using the projector.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Godot editor really likes to have a lot of screen space. My projector has a
native resolution of 1280x800, and that makes things pretty tight, especially
in the code editor. Adding a keyboard shortcut to toggle &amp;ldquo;Distraction Free Mode&amp;rdquo;
was a must.&lt;/p&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Coding is a Life Skill</title>
      <link>/blog/2015/11/life_skill/</link>
      <pubDate>Sun, 01 Nov 2015 12:04:02 -0700</pubDate>
      
      <guid>/blog/2015/11/life_skill/</guid>
      <description>&lt;p&gt;I have often said that I believe computer programming should be adopted as a core curriculum subject in primary school, just like science, history, or math.  I often give presentations to this effect for parents, teachers, and school administrators.  In this article, I&amp;rsquo;ll explore a few of the reasons why I believe so strongly in the power of early CS education.&lt;/p&gt;

&lt;p&gt;When considering the place of computer science in the curriculum, let&amp;rsquo;s first look at why we teach other core subjects.&lt;/p&gt;

&lt;p&gt;We teach science because we want children to understand the world around them, and the scientific method is a fantastic intellectual tool for investigating the world around you. In a modern society, where scientific advancements directly affect so many aspects of our lives, it is advantageous to have a good understanding of how science works.&lt;/p&gt;

&lt;p&gt;In the same way, learning about history or math contribute to a better understanding of the world by providing perspectives and ways of thinking that we wouldn&amp;rsquo;t otherwise know.  In particular, I&amp;rsquo;ll talk about the use of math in more detail below.&lt;/p&gt;

&lt;h3 id=&#34;but-what-about-kids-who-aren-t-interested-in-becoming-programmers&#34;&gt;&amp;ldquo;But what about kids who aren&amp;rsquo;t interested in becoming programmers?&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;We don&amp;rsquo;t teach science and math because we expect every child to grow up and become a scientist or engineer. The goal of a general education is to produce a well-rounded individual who has a good understanding of the world.  It&amp;rsquo;s also important because it gives kids a chance to discover their aptitudes. If a child is never even exposed to a particular subject, how can they find or develop a passion for it?&lt;/p&gt;

&lt;p&gt;Even kids whose talents lie in a non-technical direction can benefit from a solid understanding of how technology works.  Regardless of your future path, it&amp;rsquo;s very likely that you will be using and interacting with technology to some extent in your career and daily life.&lt;/p&gt;

&lt;h3 id=&#34;coding-is-problem-solving&#34;&gt;Coding is problem solving&lt;/h3&gt;

&lt;p&gt;Programming a computer is an exercise in problem solving and logic.  In order to successfully program a computer to perform a particular task, the programmer has to break the problem down into manageable, bite-sized steps and &amp;ldquo;teach&amp;rdquo; those steps to the computer.&lt;/p&gt;

&lt;p&gt;Even outside of computer programming, this is a hugely valuable skill.  Being able to tackle complex problems and break them down is something that many professions can benefit from.  Think about complicated situations that you&amp;rsquo;ve had to deal with in your work or personal life.  Consider a lawyer, for example, constructing an argument based on a set of facts, or an architect designing all the many systems that go into a new building.  These are all very similar processes of logic and problem solving.&lt;/p&gt;

&lt;h3 id=&#34;it-s-empowering&#34;&gt;It&amp;rsquo;s empowering&lt;/h3&gt;

&lt;p&gt;Predicting the future is notoriously difficult, but it&amp;rsquo;s probably a safe bet to say that today&amp;rsquo;s kids will not have &lt;em&gt;less&lt;/em&gt; technology around them when they grow up.  Those students who have developed an understanding of how technology works will be better equipped to deal with the ways that technology impacts their lives.&lt;/p&gt;

&lt;p&gt;Programming a computer is not the same as simply using it. Learning to program changes you from a passive consumer of technology to an active creator of it.  It&amp;rsquo;s like the difference between being a reader and knowing how to write, or a movie-goer versus a filmmaker.  You are better equipped to evaluate, understand, and even change, the technology that surrounds you instead of just accepting it as it is presented to you.&lt;/p&gt;

&lt;p&gt;Plus, imagine how positive would it be if tomorrow&amp;rsquo;s law and policy makers were to have a better understanding of technology and its impact on society.&lt;/p&gt;

&lt;!-- ### It complements many other subjects
Programming has many practical applications to other areas of knowledge. --&gt;

&lt;h3 id=&#34;it-pays-to-start-young&#34;&gt;It pays to start young&lt;/h3&gt;

&lt;p&gt;For those students who &lt;em&gt;do&lt;/em&gt; have an aptitude and interest in computer science and/or software engineering, there is a huge benefit to being exposed to those subjects at an early age.&lt;/p&gt;

&lt;p&gt;Like many skills, becoming accomplished at programming takes practice.  It can be likened to playing the piano - no matter how naturally talented the player, there is no substitute for lots and lots of practice.  Students whose first exposure to programming doesn&amp;rsquo;t happen until they reach college will be at a disadvantage to those who have already been coding for years.  In my own experience, I have interviewed recent college graduates who, while completing a computer science degree, are not sufficiently experienced in programming to be able to fulfill the requirements of an entry level coding position.  They just haven&amp;rsquo;t had enough practice.&lt;/p&gt;

&lt;h3 id=&#34;it-has-a-future&#34;&gt;It has a future&lt;/h3&gt;

&lt;p&gt;Computer technology is becoming more and more deeply integrated into our world.  Mobile computing, robotics, nanotechnology and other fields are rapidly growing and all will need programmers to make them work.  Medical and other scientific research fields now use computers extensively - indeed, they can&amp;rsquo;t be done without computing anymore.&lt;/p&gt;

&lt;p&gt;To illustrate this fact, as of last year, the unemployment rate in the high tech sector was around 3%, with that of programmers in specific being half that.  During the recent recession, coders were relatively immune to the downturn in employment. Tomorrow&amp;rsquo;s programmers will continue to be in demand as these and other technology fields continue to grow.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These are just a few of the ways that early computer science education can benefit today&amp;rsquo;s students.  In short: we need kids who are prepared for the high tech future.&lt;/p&gt;

&lt;p&gt;None of these recommendations should be taken as promoting a particular &lt;em&gt;specific&lt;/em&gt; technology kids should learn (although I am a strong advocate for the &lt;a href=&#34;http://python.org/&#34;&gt;Python programming language&lt;/a&gt; and its &lt;a href=&#34;http://kidscancode.org/blog/2015/09/whypython/&#34;&gt;benefits for beginners&lt;/a&gt;).  Technology is changing all the time - today&amp;rsquo;s popular platforms will be tomorrow&amp;rsquo;s quaint memory. However, the &lt;em&gt;concepts&lt;/em&gt; of programming remain the same: problem solving, computational thinking, and logic.&lt;/p&gt;

&lt;p&gt;I welcome your comments and questions below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Struggles</title>
      <link>/blog/2015/10/struggles/</link>
      <pubDate>Tue, 13 Oct 2015 19:04:12 PDT</pubDate>
      
      <guid>/blog/2015/10/struggles/</guid>
      <description>&lt;p&gt;Over the past few years, I&amp;rsquo;ve taught hundreds of kids to code using Python in workshops, after school programs, and as part of school curriculum.  Most of the students I teach are around middle school age (11-14).  I find this age to be a great time to start learning.  The kids are very engaged and capable - and very motivated to learn, if given the chance.&lt;/p&gt;

&lt;p&gt;I prefer Python for teaching kids for a &lt;a href=&#34;http://kidscancode.org/blog/2015/09/whypython/&#34;&gt;number of reasons&lt;/a&gt;, foremost because it&amp;rsquo;s a very beginner-friendly language.  That said, however, there are still a number of very common areas where kids tend to struggle the most.&lt;/p&gt;

&lt;p&gt;Below is a list of the problems I encounter most often in the classroom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nested parentheses&lt;/li&gt;
&lt;li&gt;Missing colons&lt;/li&gt;
&lt;li&gt;Indentation&lt;/li&gt;
&lt;li&gt;IDLE issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nested-parentheses&#34;&gt;Nested parentheses&lt;/h3&gt;

&lt;p&gt;One of the most common syntax errors I see among students is leaving off the ending parentheses when one statement is nested inside another. Nested parentheses happen frequently, and help with both readability and reducing code complexity.&lt;/p&gt;

&lt;p&gt;For example, instead of doing this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;turtle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can simplify by nesting the randrange() call inside the parentheses of the left() function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;turtle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Often, the first time they see something like this, the question from my students will be &amp;ldquo;Why are there two parentheses at the end?&amp;rdquo;  It&amp;rsquo;s very important to emphasize that parentheses come in pairs and there should never be an odd one out.  Sometimes, I&amp;rsquo;ll encourage students to use spaces to highlight the nesting (although &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP8&lt;/a&gt; fanatics will cringe):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;turtle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;missing-colons-on-loops-and-functions&#34;&gt;Missing colons on loops and functions&lt;/h3&gt;

&lt;p&gt;One of the first constructions students learn is the for loop, which allows you to repeat a block of code multiple times:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That colon at the end of the first line is very important, because it indicates that the indented code coming after it is the block that belongs to the loop (ie the code that is to be repeated).&lt;/p&gt;

&lt;p&gt;Forgetting to type this colon has a couple of implications.  In addition to resulting in an &amp;ldquo;expected an indented block&amp;rdquo; error message, it also means that the editor (usually IDLE when working with beginners) won&amp;rsquo;t automatically indent the next line - so now the student has two problems: adding the colon and fixing the indenting.&lt;/p&gt;

&lt;h3 id=&#34;indentation&#34;&gt;Indentation&lt;/h3&gt;

&lt;p&gt;As shown in the previous example, indentation is important to Python.  It indicates code blocks and how they are related.  IDLE actually does a pretty good job of trying to automatically indent, but it only goes in the forward direction - if you need to unindent one level, you have to hit &amp;ldquo;Backspace.&amp;rdquo;  This leads to problems like the following, which will result in an &amp;ldquo;syntax error&amp;rdquo; message:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Too high!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Too low!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;You got it!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The correct indentation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Too high!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Too low!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;You got it!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;idle-issues&#34;&gt;IDLE issues&lt;/h3&gt;

&lt;p&gt;IDLE is the code editor and development environment that is installed automatically when Python is installed on your computer.  It&amp;rsquo;s a great tool for beginners, because it allows them to get started right away without needing to install any additional, complex software development tools.  However, it also has a number of annoying quirks that can waste huge amounts of a beginning coder&amp;rsquo;s time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the single biggest time waster and source of frustration.  When you launch IDLE, you first see a shell window.  If you want to start typing a new program, that means opening another window (which will be the same size, so now they&amp;rsquo;re overlapping).  When you run your program, the output shows up in the shell window (if it&amp;rsquo;s text-based) or in yet another window (if it&amp;rsquo;s graphical). Kids are constantly forced to struggle with moving overlapping windows around to find the one they need.  Often, they&amp;rsquo;ll close the Shell window, thinking they don&amp;rsquo;t need it, only to find that it being automatically reopened the next time they run their program.  To top it all off, IDLE doesn&amp;rsquo;t even try to remember window positions, so even if you do get things arranged in some sort of useful fashion, the next time you open a new window it all begins again.&lt;/p&gt;

&lt;p&gt;I showed this to a usability expert once and she thought it was a nightmare. I am constantly amazed at how patient and accepting kids are of these problems.  Often, I am more frustrated as the instructor than the kids are with the whole process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unfriendly naming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you&amp;rsquo;ve typed your code and it&amp;rsquo;s time to try running it, you need to click on the &amp;ldquo;Run&amp;rdquo; menu.  This is fine, but there are three options in this menu, and it&amp;rsquo;s impossible for a beginner to guess which is the right one.  There&amp;rsquo;s &amp;ldquo;Python Shell&amp;rdquo; (which we already have popping up all the time anyway), &amp;ldquo;Check Module&amp;rdquo;, and &amp;ldquo;Run Module.&amp;rdquo;  The correct choice is &amp;ldquo;Run Module&amp;rdquo;, which just leads me to teaching them to use the &amp;ldquo;F5&amp;rdquo; shortcut as soon as possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error popups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Errors can be quite confusing in IDLE.  Sometimes they generate popups (ex: &amp;ldquo;invalid syntax&amp;rdquo; or &amp;ldquo;expected an indented block&amp;rdquo;) while others show up in the Python Shell window.  The popups are especially troublesome, because they&amp;rsquo;re modal (meaning you must click &amp;ldquo;Ok&amp;rdquo; on them before you can do anything else) but not always on top.  So what happens is a student will see the message and then click on their code window to see what&amp;rsquo;s happening.  Now there&amp;rsquo;s a tiny modal window hiding where it can&amp;rsquo;t be seen and the student is unable to type and thinks their computer has crashed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poor font options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one is mainly a problem for me as a teacher.  There are only a limited number of font size options (with 22 being the largest).  When I&amp;rsquo;m displaying code on the projector, it can sometimes be hard to read from across the room, or I&amp;rsquo;d like to zoom in on a particular chunk of code.  In any other editor on the market, you can hit a +/- key combination to zoom the font size as big or small as you like, but in IDLE you are stuck with limited settings.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-typing&#34;&gt;A note on typing&lt;/h3&gt;

&lt;p&gt;All the above notwithstanding, I must point out here that the single most important factor in my experience that determines how much a student struggles with the learning to code is typing ability.  A student who is spending time and mental energy on hunting for the right keys is taking attention away from understanding the difficult concepts of the lesson.  In addition, they&amp;rsquo;re slower than other students so they start to feel pressure to keep up, which leads to a frustrating experience all around.&lt;/p&gt;

&lt;p&gt;There are many great free typing practice websites to choose from. My favorite is &lt;a href=&#34;http://typing.com&#34;&gt;Typing.com&lt;/a&gt;. Encourage your kids to practice - they&amp;rsquo;ll thank you later!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why Python?</title>
      <link>/blog/2015/09/whypython/</link>
      <pubDate>Thu, 24 Sep 2015 12:26:33 PDT</pubDate>
      
      <guid>/blog/2015/09/whypython/</guid>
      <description>&lt;p&gt;There are a huge number of programming languages out there.  You&amp;rsquo;ve probably heard of one or two, even if you&amp;rsquo;re not a programmer yourself - Java, C++, Swift, etc.  But what are they all about and how do you choose which one to learn?&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s really not one perfect answer to this question, but personally, I prefer Python for teaching kids for a number of reasons.  I&amp;rsquo;ll go into some of those reasons below, but if I had to boil it down to a few bullet points, they would be these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s great for beginners&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not a &amp;ldquo;teaching&amp;rdquo; language&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s very widely used&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;programming-languages-are-tools&#34;&gt;Programming languages are tools&lt;/h2&gt;

&lt;p&gt;Programming languages can be thought of as tools in a toolbox.  You wouldn&amp;rsquo;t use a hammer to cut a piece of wood, and likewise a programmer will often choose a particular language based on what type of project they&amp;rsquo;re working on, or what the other members of their team may be using.  Most programmers will learn multiple languages over the course of their careers.&lt;/p&gt;

&lt;p&gt;While that may sound daunting, the good news is that programming languages are not like human languages.  Learning Italian does not make it any easier to learn Japanese because the two are completely unrelated.  Programming languages, however, are all very similar in most respects.  Once you&amp;rsquo;ve learned one, the next one will be much easier - so it makes sense to choose a beginner-friendly language for your first.&lt;/p&gt;

&lt;p&gt;Ultimately, learning to code is about learning how to think about problems and how to convince a computer to do what you want it to do.  You have to take a given problem or task and break it down into small manageable pieces that a computer can understand. The actual programming language is secondary, and by far the easier part of the learning process.&lt;/p&gt;

&lt;h2 id=&#34;python-is-great-for-beginners&#34;&gt;Python is great for beginners&lt;/h2&gt;

&lt;p&gt;Beginners need to start out by doing simple things.  Learning to code is hard enough when you&amp;rsquo;ve never been exposed to it before. The more the language can get out of your way and let you focus on the concepts, the better you&amp;rsquo;ll be able to understand them.  Some languages were just never intended to be for beginners (I&amp;rsquo;m looking at you, Java).&lt;/p&gt;

&lt;p&gt;Python was designed from the start to be a &lt;em&gt;readable&lt;/em&gt; language, which is one of the things that makes it so friendly for beginners.  There are no semicolons or curly brackets to keep track of, so it&amp;rsquo;s easier to look at and comprehend.  Because good formatting is required, it forces the programmer to think about how the code is organized.&lt;/p&gt;

&lt;p&gt;For example, here is the code to print the words &amp;ldquo;Hello, World!&amp;rdquo; to the screen in Python:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By comparison, here is what you would need to type for Java:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or this, for C:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Beginners are not ready for some of the more advanced concepts required to explain what each of those lines of Java or C does, so most beginner classes are forced to gloss over them with &amp;ldquo;just type it and you&amp;rsquo;ll learn why later.&amp;rdquo;  In contrast, in Python it&amp;rsquo;s easy to do easy things.  Especially when teaching children, this is a very important factor.&lt;/p&gt;

&lt;p&gt;As another example, let&amp;rsquo;s look at the loop.  Loops are a very important part of programming; they tell the computer to repeat some code over and over.  Here&amp;rsquo;s how you print &amp;ldquo;hello&amp;rdquo; five times in Python:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Versus Java:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;“&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The C-style loop syntax (initialize; test; update) is very tricky to get right at first - there&amp;rsquo;s a lot to unpack there.  And don&amp;rsquo;t even get me started on all those curly brackets.&lt;/p&gt;

&lt;h2 id=&#34;but-it-s-not-only-for-beginners&#34;&gt;But it&amp;rsquo;s not &lt;em&gt;only&lt;/em&gt; for beginners&lt;/h2&gt;

&lt;p&gt;A lot of programming curriculum addresses the friendliness problem by using specialized teaching languages that simplify things for the classroom environment.  The problem with this solution is that it sets a ceiling on how far students can go; when they reach the limits of the teaching language and want to move on to &amp;ldquo;real&amp;rdquo; programming, they are forced to start over with a whole new system.&lt;/p&gt;

&lt;p&gt;Python, while very friendly to beginners, is widely used by experts as well.  It is very popular both in industry and academia.  According to a recent survey, many of the top engineering schools use it (&lt;a href=&#34;http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext&#34;&gt;http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext&lt;/a&gt;). It&amp;rsquo;s also an increasingly popular alternative to expensive systems like Matlab for scientific computing applications.&lt;/p&gt;

&lt;p&gt;Another very important point: Python is free and runs on any kind of computer.  Because it&amp;rsquo;s not a commercial product tied to a particular platform, students are not limited by what they might have access to at home/school or required to invest in any expensive software to get started.&lt;/p&gt;

&lt;p&gt;All of this means that there is a vast amount of available resources for Python - books, videos, web tutorials, and online courses.  The Python community is very large and welcoming to newcomers.&lt;/p&gt;

&lt;h3 id=&#34;what-about-javascript&#34;&gt;What about Javascript?&lt;/h3&gt;

&lt;p&gt;Javascript (not to be confused with Java - the two are completely unrelated) is another popular choice for teaching kids programming.  Its advantage is its ubiquity: all you need is a web browser, so there&amp;rsquo;s nothing to install.  For that reason, many sites like Khan Academy and code.org have chosen it.  However, I find its syntax to be a little less friendly than Python, so it&amp;rsquo;s not my first choice in the classroom.  It would make a great second language for app/game development, though.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Learning to code is the important thing - which language should be a matter of practicality.&lt;/p&gt;

&lt;p&gt;Ultimately, the best answer to the question of what programming language to learn is the one that you will have the most support in.  There is a wealth of material on the Internet to help learn any language.  However, new programmers, especially kids, often get stuck and just need someone who can help them get over that speed bump.  If a student is learning at home and they have an Uncle or Aunt who&amp;rsquo;s a Java programmer, then that&amp;rsquo;s going to be a more effective choice than one with no support available.&lt;/p&gt;

&lt;p&gt;Over the past few years, I&amp;rsquo;ve taught hundreds of kids in beginner and intermediate level Python classes and I&amp;rsquo;ve been very happy with Python as our language of choice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gamification and Education</title>
      <link>/blog/2015/08/gamification1/</link>
      <pubDate>Sun, 23 Aug 2015 20:38:26 PDT</pubDate>
      
      <guid>/blog/2015/08/gamification1/</guid>
      <description>&lt;p&gt;&amp;ldquo;Gamification&amp;rdquo; is the application of game design and gaming mechanics in non-gaming contexts.  When you see LinkedIn giving you a &amp;ldquo;profile score,&amp;rdquo; that&amp;rsquo;s gamification at work.  Done well, it can be a great method of incentivizing users to be more active.  In fact, in the absence of formal gamification features, users will often &amp;ldquo;gamify&amp;rdquo; things themselves - from people on Facebook who try and get more Likes than their friends, to drivers trying to time it so they don&amp;rsquo;t hit any red lights.  Our brains are wired for play, and we&amp;rsquo;re always looking for ways to get that feeling of reward that comes from a win.&lt;/p&gt;

&lt;p&gt;Gamification is also a big buzzword in education these days.  However, when you think about it, it&amp;rsquo;s not really a new idea at all.  Teachers have long offered incentives to students who meet certain behavior or academic goals - think gold stars, prize boxes, and extra credit points.  In point of fact, there&amp;rsquo;s nothing really conceptually different between getting an &amp;ldquo;A&amp;rdquo; on the report card and a &amp;ldquo;High Score&amp;rdquo; at the end of a game level.  In both cases, you move up to the next level and start again with more challenging material/opponents.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s different today is that with the rise of the electronic gaming industry, we have developed a whole new suite of tools and structures for harnessing the psychology of players and collecting data on what works and what doesn&amp;rsquo;t.  Especially in the free-to-play market (disclaimer: I have worked for several free-to-play publishers), data analysis and incentivization have become highly refined tools that drive game design and can directly affect the success/failure of a title.&lt;/p&gt;

&lt;p&gt;This is where the objections to gamification, especially in the context of education, usually stem.  There are any number of examples of free-to-play &amp;ldquo;games&amp;rdquo; that are really nothing more than barely disguised Skinner boxes designed to exploit players&amp;rsquo; addictive tendencies in the hopes of coercing a click on the &amp;ldquo;Buy now&amp;rdquo; button.  However, ultimately gamification is nothing but a tool and just like any tool, it can be applied poorly and lead to results opposite of those intended.
I believe that gamification promises to provide powerful tools to drive learning in a positive way, both online and in the classroom.  I&amp;rsquo;m certainly not alone in this belief, and over the next few months, I&amp;rsquo;ll be looking into a variety of projects in this space and writing about them here.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, please feel free to reach out to me at the contact link on the right, or join us on &lt;a href=&#34;http://facebook.com/Kidscancode/&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
